#pragma once

// GLEW
#include <GL/glew.h>

// SDL
#include <SDL.h>
#include <SDL_opengl.h>

// GLM
#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtx/transform2.hpp>

#include "gCamera.h"
#include "gShaderProgram.h"
#include "gVertexBuffer.h"
#include "Mesh_OGL3.h"

class CMyApp
{
public:
	CMyApp(void);
	~CMyApp(void);

	bool Init();
	void Clean();

	void Update();
	void Render();

	void KeyboardDown(SDL_KeyboardEvent&);
	void KeyboardUp(SDL_KeyboardEvent&);
	void MouseMove(SDL_MouseMotionEvent&);
	void MouseDown(SDL_MouseButtonEvent&);
	void MouseUp(SDL_MouseButtonEvent&);
	void MouseWheel(SDL_MouseWheelEvent&);
	void Resize(int, int);
protected:
	GLuint GenTexture();

	GLuint m_textureID;

	void add_triangle(const glm::vec3 &P1,
		const glm::vec3 &P2,
		const glm::vec3 &P3,
		gVertexBuffer &buffer);

	void SurfaceEquation(float u, float v, glm::vec3& point, glm::vec3& normal, glm::vec2& texture);

	void genParametricSurface(int n, gVertexBuffer &buffer);

	const float sphereResolution = 20;

	gCamera			m_camera;
	gShaderProgram	m_program;
	gVertexBuffer	m_vb; // plane

	Mesh			*m_mesh;

	// Create an Hexagonal Pyramid using VAO­s and VBO­s (or VertexBuffer)
	gVertexBuffer	m_vb_hexagonal_pyramid;
	void InitHexagonalPyramid();
	void DrawHexagonalPyramid(const glm::mat4& world);

	// Load ‘Ellipsoid.obj’ and display it in the scene!
	Mesh			*m_mesh_ellipsoid; 
	//Texture the ellipsoid with ‘wood5.jpg’,  ....
	GLuint m_textureID_wood5;
	//and texture the pyramid with a red color texture, generated by your program(1 - 1 point)!
	GLuint m_textureID_generatedred;
	GLuint GenTextureRed();
	// draw the ellipsoid...
	void DrawEllipsoid(const glm::mat4& world);

	// light color
	glm::vec4 m_Ld = glm::vec4(0.75f, 0.25f, 0.125f, 1);
};